{"name":"Csvision","body":"# CSVision\r\n\r\n[![Build Status](https://secure.travis-ci.org/cloverinteractive/csvision.png?branch=master)](http://travis-ci.org/cloverinteractive/csvision)\r\n\r\nConvert a Hash into a CSV the easy way.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n`gem 'csvision'`\r\n\r\nAnd then execute:\r\n\r\n`bundle`\r\n\r\nOr install it yourself as:\r\n\r\n`gem install csvision`\r\n\r\n## Usage\r\n\r\nCSVision has no prerequisites other than ruby itself, which is pretty cool just include the `csvision` gem in your app and you'll be good to go.\r\n\r\n### Hash\r\n\r\nCSVision adds to `Hash` the `to_csv` method, anything that inherits from `Hash` will inherit this method as well, you do not need to open `Hash` and include `CSVision` in it, just require the library in your code.\r\n\r\n```ruby\r\nrequire 'csvision'\r\nsample = { :name => 'foo', :last_name => 'bar', :age => 10 }\r\nsample.to_csv #=> \"\\\"last_name\\\",\\\"name\\\",\\\"age\\\"\\n\\\"bar\\\",\\\"foo\\\",\\\"10\\\"\"\r\n```\r\n### Rails\r\n\r\nCSVision adds the following methods to Rails:\r\n\r\n1. `to_csv` at the model instance\r\n2. `to_csv` at the model class\r\n3. `add_csvision` at the model class\r\n\r\nA rails model might look something like this:\r\n\r\n```ruby\r\nclass Product < ActiveRecord::Base\r\n  validates_presence_of :name, :permalink, :description\r\n  add_csvision :except => %w/updated_at created_at/\r\nend\r\n```\r\n\r\nCSVision lets you customize the way your CSV is formed, you can use any of the following options in the `add_csvision` method:\r\n\r\n1. `:only` to set only those parameters you wish to include.\r\n2. `:except` this does the opposite it excludes options from the list.\r\n3. `:delimeter` this set the field delimeter and it defaults to `\"`\r\n4. `:separator` this set the field separator and it defults to `,`\r\n\r\nThat's good and all but, you never want to just convert a single object to csv but collections instead, so imagine this model instead:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  add_csvision :csv_headers => %w/street_cred nickname incognito/, :body => lambda { |u| [ u.street_cred, u.nickname, u.incognito ] }\r\n\r\n  scope :flunky, where( 'points <= 5' )\r\n\r\n  def incognito\r\n    nickname.reverse\r\n  end\r\n\r\n  def street_cred\r\n    points * 100 + ( nickname_cred )\r\n  end\r\n\r\n  private\r\n  def nickname_cred\r\n    nickname.unpack( 'U' * nickname.length ).sum # good nickname equals more street cred\r\n  end\r\nend\r\n```\r\n\r\nYou can use the `:headers` option to set your header names, and the `:body` option to specify the methods or properties from the option you want\r\ncalled in your csv, this gives you flexibility to choose how your csv is formed and from what it is formed, so this is an example of how this works.\r\n\r\n```ruby\r\n5.times { |i| User.create( :nickname => \"user#{ i * 3 }\", :points => i * 5 ) }\r\nputs User.to_csv\r\n```\r\n\r\nthis will print:\r\n\r\n```\r\n\"street_cred\",\"nickname\",\"incognito\"\r\n\"495\",\"user0\",\"0resu\"\r\n\"998\",\"user3\",\"3resu\"\r\n\"1501\",\"user6\",\"6resu\"\r\n\"2004\",\"user9\",\"9resu\"\r\n\"2546\",\"user12\",\"21resu\"\r\n```\r\n\r\nYou can chain active record calls and even scopes in to your mix, so consider:\r\n\r\n```ruby\r\n5.times { |i| User.create( :nickname => \"user#{ i * 3 }\", :points => i *5 ) }\r\nputs User.flunky.to_csv\r\n```\r\nwill print:\r\n\r\n```\r\n\"street_cred\",\"nickname\",\"incognito\"\r\n\"495\",\"user0\",\"0resu\"\r\n\"998\",\"user3\",\"3resu\"\r\n\"1501\",\"user6\",\"6resu\"\r\n```\r\n\r\nLastly, with the exception of `:except` and `:only` which will be ignore because you're setting the body manually all other option work:\r\n\r\n```ruby\r\n5.times { |i| User.create( :nickname => \"user#{ i * 3 }\", :points => i *5 ) }\r\nputs User.to_csv( :headers => false )\r\n```\r\n\r\nWill print:\r\n\r\n```\r\n\"495\",\"user0\",\"0resu\"\r\n\"998\",\"user3\",\"3resu\"\r\n\"1501\",\"user6\",\"6resu\"\r\n\"2004\",\"user9\",\"9resu\"\r\n\"2546\",\"user12\",\"21resu\"\r\n```\r\n\r\n### Outside of Rails\r\n\r\nAnything that inherits from `Hash` will `respond_to? :to_csv` however if you want to use this in any other regular class make sure you do the following:\r\n\r\n1. Create a `Hash` attribute named `attributes`.\r\n2. You'll need to have class `count` and `find_each` methods if you want support for setting the `body`.\r\n3. `include CSVision` in your class.\r\n\r\n```ruby\r\nclass SampleStack\r\n  include CSVision\r\n  attr_accessor :attributes\r\n\r\n  add_csvision :csv_headers => %w/price name/, :body => lambda { |s| [ s[:name], s[:price] ] }\r\n\r\n  def initialize( attributes={}, inventory = [] )\r\n    @attributes = attributes\r\n    @@inventory = inventory\r\n  end\r\n\r\n  def self.count\r\n    @@inventory.size\r\n  end\r\n\r\n  def self.find_each( opts={} )\r\n    @@inventory.each do |item|\r\n      yield item\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAfter wards imagine the following:\r\n\r\n```ruby\r\nsample_stack = SampleStack.new( :foo => 'foo', :bar => 'bar' )\r\nputs sample_stack.to_csv\r\n```\r\n\r\nWill print:\r\n\r\n```\r\n\"foo\",\"bar\"\r\n\"foo\",\"bar\"\r\n```\r\n\r\nBut more importantly `to_csv` at the class level will:\r\n\r\n```ruby\r\ninventory = [ { :name => 'beer', :price => 9 }, { :name => 'milk', :price => 5 }, { :name => 'tuna', :price => 3 } ]\r\nsample_stack = SampleStack.new({ :name => 'groceries'}, inventory)\r\nputs SampleStack.to_csv\r\n```\r\n\r\nPrints:\r\n\r\n```\r\n\"price\",\"name\"\r\n\"beer\",\"9\"\r\n\"milk\",\"5\"\r\n\"tuna\",\"3\"\r\n```\r\n\r\n## TODO:\r\n\r\n1. Add support for other ORM's\r\n2. Rails 3.x responder.\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","tagline":"Convert Hash into CSV","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}